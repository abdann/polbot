"""added parameter JSON column

Revision ID: 7d6ee6e3ad0a
Revises: 
Create Date: 2022-08-13 11:00:16.130436

"""
from alembic import op
import sqlalchemy as sa
import sqlalchemy.orm
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, ForeignKey, Integer, Text, text, JSON
from sqlalchemy.ext.mutable import MutableDict

# revision identifiers, used by Alembic.
revision = '7d6ee6e3ad0a'
down_revision = None
branch_labels = None
depends_on = None

Base = declarative_base()

class Parameter(Base):
    __tablename__ = 'parameters'

    server_id = Column(ForeignKey('servers.server_id', ondelete='CASCADE'), primary_key=True)
    min_account_age = Column(Integer, nullable=False, server_default=text("123"))
    new_auto_ban = Column(Integer, nullable=False, server_default=text("123"))
    lockdown = Column(Integer, nullable=False, server_default=text("123"))
    polder_channel_id = Column(Integer, server_default=text("123"))
    polder = Column(Integer, nullable=False, server_default=text("123"))
    random_polder_posts = Column(Integer, nullable=False, server_default=text("123"))
    random_text_posts = Column(Integer, nullable=False, server_default=text("123"))
    shitpost_probability = Column(Integer, nullable=False, server_default=text("123"))
    parameters = Column(MutableDict.as_mutable(JSON))

class Server(Base):
    __tablename__ = 'servers'

    server_id = Column(Integer, primary_key=True)

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('parameters', Column('parameters', MutableDict.as_mutable(JSON)))
    # ### end Alembic commands ###

    bind = op.get_bind()
    session = sqlalchemy.orm.Session(bind)
    rows = session.execute(
        sa.select(
        Parameter.server_id,
        Parameter.min_account_age,
        Parameter.new_auto_ban,
        Parameter.lockdown,
        Parameter.polder_channel_id,
        Parameter.polder,
        Parameter.random_polder_posts,
        Parameter.random_text_posts,
        Parameter.shitpost_probability
        )).fetchall()
    for row in rows:
        server_id = row["server_id"]
        parameter_dict = {column : row[column] for column in row.keys() if column != "server_id"}
        session.execute(sa.update(Parameter).where(Parameter.server_id == server_id).values(parameters=parameter_dict))

    columns_to_drop = [column for column in rows[0].keys() if column != "server_id"]
    for column in columns_to_drop:
        op.drop_column('parameters', column)
    session.commit()
def downgrade() -> None:
    op.add_column('parameters', Parameter.min_account_age)
    op.add_column('parameters', Parameter.new_auto_ban)
    op.add_column('parameters', Parameter.lockdown)
    op.add_column('parameters', Parameter.polder_channel_id)
    op.add_column('parameters', Parameter.polder)
    op.add_column('parameters', Parameter.random_polder_posts)
    op.add_column('parameters', Parameter.random_text_posts)
    op.add_column('parameters', Parameter.shitpost_probability)
    bind = op.get_bind()
    session = sqlalchemy.orm.Session(bind=bind)

    rows = session.execute(sa.select(Parameter.server_id, Parameter.parameters)).fetchall()
    for row in rows:
        server_id = row['server_id']
        parameter_dict = row['parameters']
        session.execute(sa.update(Parameter).where(Parameter.server_id == server_id).
        values(
            min_account_age=parameter_dict['min_account_age'],
            new_auto_ban=parameter_dict['new_auto_ban'],
            lockdown=parameter_dict['lockdown'],
            polder_channel_id=parameter_dict['polder_channel_id'],
            polder=parameter_dict['polder'],
            random_polder_posts=parameter_dict['random_polder_posts'],
            random_text_posts=parameter_dict['random_text_posts'],
            shitpost_probability=parameter_dict['shitpost_probability']
            )
        )
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('parameters', 'parameters')
    # ### end Alembic commands ###
    session.commit()